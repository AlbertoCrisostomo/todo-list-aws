pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        STAGE = 'staging'

        GITHUB_TOKEN = credentials('git-token-id')
    }

    stages {
        stage('Get Code') {
            steps {
                echo 'Inicio de stage Get Code!!!'
                dir('todo-list-aws') {
                    git branch: 'develop', url: 'https://github.com/AlbertoCrisostomo/todo-list-aws.git', credentialsId: 'git-token-id'
                }
                
                // Checkout second repository
                dir('todo-list-aws-samconfig') {
                    git branch: 'staging', url: 'https://github.com/AlbertoCrisostomo/todo-list-aws-samconfig.git'
                }
                
                // Mueve el contenido del segundo repositorio al primero
                sh 'cp -r todo-list-aws-samconfig/* todo-list-aws/'
            }
        }
        
        stage('Build & Deploy'){
            steps {
                echo 'Inicio del Build!!!'
                dir('todo-list-aws') {
                    sh 'pwd'
                    sh "sam build"
                }

                sleep(time: 5, unit: 'SECONDS')

                echo 'Inicio del Deploy!!!'
                dir('todo-list-aws') {
                    sh 'pwd'
                    sh "sam deploy \
                          --config-env ${env.STAGE} \
                          --config-file samconfig.toml \
                          --no-fail-on-empty-changeset \
                          --no-confirm-changeset"
                }
            }
        }

        stage('Rest Tests') {
            steps {
                script {
                    echo "Inicio de stage Rest Tests"
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh '''
                            #!/bin/bash
    
                            # Muestra la salida del Stage y Region
                            echo "Input 1 'stage' value: ${STAGE}"
                            echo "Input 2 'region' value: ${AWS_REGION}"
    
                            # Describe CloudFormation stacks y captura la salida
                            outputs=$(aws cloudformation describe-stacks --stack-name ${STAGE}-todo-list-aws --region ${AWS_REGION}  | jq '.Stacks[0].Outputs')
                        
                            # Extrae el valor de BaseUrlApi usando jq
                            BASE_URL_API=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="BaseUrlApi") | .OutputValue')
                        
                            # Muestra el valor de BaseUrlApi
                            echo $BASE_URL_API
    
                            # Setea en el entorno la URL
                            export BASE_URL=$BASE_URL_API
    
                            # Ejecuta las pruebas
                            pytest --junitxml=result-rest.xml test/integration/todoApiTest.py
                        '''
                        
                        // Muestra el resultado
                        junit 'result*.xml'
                    }
                }
            }
        }

    }
}
